import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// Define the structure of a Contact
interface Contact {
  id: string; // Unique identifier for the contact
  firstName: string; // Contact's first name
  lastName: string; // Contact's last name
  status: "Active" | "Inactive"; // Contact's status, can be either 'Active' or 'Inactive'
}

// Define the structure of the ContactState which includes an array of contacts
interface ContactState {
  contacts: Contact[]; // Array to store all contacts
}

// Initial state with an empty contacts array
const initialState: ContactState = {
  contacts: [],
};

// Create a slice for contacts with Redux Toolkit
const contactSlice = createSlice({
  name: "contacts", // Name of the slice
  initialState, // Initial state for this slice
  reducers: {
    // Reducer to add a new contact
    addContact(state: ContactState, action: PayloadAction<Contact>) {
      state.contacts.push(action.payload); // Add the new contact to the contacts array
    },

    // Reducer to edit an existing contact
    editContact(state: ContactState, action: PayloadAction<Contact>) {
      const index = state.contacts.findIndex(
        (contact) => contact.id === action.payload.id
      );
      if (index !== -1) {
        state.contacts[index] = action.payload; // Update the contact with new details
      }
    },

    // Reducer to delete a contact by ID
    deleteContact(state: ContactState, action: PayloadAction<string>) {
      state.contacts = state.contacts.filter(
        (contact) => contact.id !== action.payload
      );
      // Filter out the contact with the given ID
    },
  },
});

// Export the actions generated by createSlice
export const { addContact, editContact, deleteContact } = contactSlice.actions;

// Export the reducer to be included in the store
export default contactSlice.reducer;
